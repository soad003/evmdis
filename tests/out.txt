// # Constructor part -------------------------
# Stack: []
0x4	MSTORE(0x40, 0x60)
0x5	PUSH(0x0)
0x7	DUP1
0xD	PUSH(0x100 ** 0x0)
0xE	DUP2
0x10	DUP1
0x17	DUP3
0x1E	SSTORE(POP(), (0xFF & POP()) * POP() | ~(0xFF * POP()) & SLOAD(POP()))
0x1F	POP()
0x25	JUMPI(:label0, !CALLVALUE())

# Stack: []
0x26	PUSH(0x0)
0x28	DUP1
0x29	REVERT()

:label0
# Stack: []
0x2C	PUSH(0x182)
0x2F	DUP1
0x35	CODECOPY(0x0, 0x3A, POP())
0x38	RETURN(0x0, POP())

# Stack: []

// # Code part -------------------------
# Stack: []
0x4	MSTORE(0x40, 0x60)

# Stack: []
0xF	JUMPI(:label4, !(CALLVALUE() > 0x0))

# Stack: []
0x10	PUSH(0x0)
0x12	DUP1
0x29	JUMPI(:label0, !(0xFF & 0xFF & SLOAD(POP()) / 0x100 ** 0x0 == POP()))

# Stack: []
0x44	PUSH(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xDEADBEEF)
0x48	PUSH(CALLVALUE())
0x4A	DUP1
0x4C	PUSH(!POP() * 0x8FC)
0x4D	SWAP1
0x50	PUSH(MLOAD(0x40))
0x55	PUSH(MLOAD(0x40))
0x56	DUP1
0x57	DUP3
0x59	DUP1
0x5A	DUP4
0x5B	DUP7
0x5C	DUP7
0x5D	PUSH(CALL(POP(), POP(), POP(), POP(), POP() - POP(), POP(), 0x0))
0x5E	SWAP4
0x5F	POP()
0x60	POP()
0x61	POP()
0x62	POP()
0x63	POP()
0x67	JUMP(:label2)

:label0
# Stack: []
0x6B	PUSH(0x0)
0x6D	DUP1
0x6E	SWAP1
0x82	JUMPI(:label1, !(0xFF & 0xFF & SLOAD(POP()) / 0x100 ** POP() == 0x1))

# Stack: []
0x9D	PUSH(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xBADDCAFE)
0xA1	PUSH(CALLVALUE())
0xA3	DUP1
0xA5	PUSH(!POP() * 0x8FC)
0xA6	SWAP1
0xA9	PUSH(MLOAD(0x40))
0xAE	PUSH(MLOAD(0x40))
0xAF	DUP1
0xB0	DUP3
0xB2	DUP1
0xB3	DUP4
0xB4	DUP7
0xB5	DUP7
0xB6	PUSH(CALL(POP(), POP(), POP(), POP(), POP() - POP(), POP(), 0x0))
0xB7	SWAP4
0xB8	POP()
0xB9	POP()
0xBA	POP()
0xBB	POP()
0xBC	POP()
0xC0	JUMP(:label2)

:label1
# Stack: []
0xC4	PUSH(0x0)
0xC6	DUP1
0xC7	SWAP1
0xDB	JUMPI(:label2, !(0xFF & 0xFF & SLOAD(POP()) / 0x100 ** POP() == 0x2))

# Stack: []
0xF6	PUSH(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xDEADC0DE)
0xFA	PUSH(CALLVALUE())
0xFC	DUP1
0xFE	PUSH(!POP() * 0x8FC)
0xFF	SWAP1
0x102	PUSH(MLOAD(0x40))
0x107	PUSH(MLOAD(0x40))
0x108	DUP1
0x109	DUP3
0x10B	DUP1
0x10C	DUP4
0x10D	DUP7
0x10E	DUP7
0x10F	PUSH(CALL(POP(), POP(), POP(), POP(), POP() - POP(), POP(), 0x0))
0x110	SWAP4
0x111	POP()
0x112	POP()
0x113	POP()
0x114	POP()
0x115	POP()

:label2
# Stack: []
0x119	PUSH(0x3)
0x11D	PUSH(0x0)
0x11F	DUP1
0x120	SWAP1
0x12F	PUSH(0xFF & (0xFF & SLOAD(POP()) / 0x100 ** POP()) + 0x1)
0x130	DUP2
0x136	JUMPI(:label3, !!POP())

# Stack: [@0x12F 0x3]
0x137	INVALID()

:label3
# Stack: [@0x12F 0x3]
0x139	PUSH(POP() % POP())
0x13A	PUSH(0x0)
0x13C	DUP1
0x140	PUSH(0x100 ** POP())
0x141	DUP2
0x143	DUP1
0x14A	DUP3
0x151	SSTORE(POP(), (0xFF & POP()) * POP() | ~(0xFF * POP()) & SLOAD(POP()))
0x152	POP()

:label4
# Stack: []
0x155	STOP()
